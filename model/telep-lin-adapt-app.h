// Note that Alice's app must be created between Alice's predecessor's app, and Bob's app

#ifndef TELEP_LIN_ADAPT_APP_H
#define TELEP_LIN_ADAPT_APP_H

#include "ns3/socket.h"
#include "ns3/application.h"

#include <complex>

namespace ns3 {

class QuantumPhyEntity;
class QuantumNode;
class Qubit;
class QuantumChannel;

/**
 * \brief Chained teleportation.
 * 
 * This application is used to schedule a teleportation between every adjacent nodes,
 * say Alice and Bob, in a teleportation chain of length N.
 * The protocol ultimately teleports a single qubit state, say psi, from Owner0 to OwnerN-1.
 * 
 * 0. The first node in the chain generates the input qubit psi.
 * 1. Every node generates and distributes a EPR pair to its neighbor with the help of DistributeEPRApps.
 * 2. The node performs local operations on its two qubits.
 * 3. God pass control information to the node from its predecessor.
 * 4. The Node (if not the last) sends a classical message to its successor to invoke the next teleportation.
 * 5. The last node performs corrections according to the controlled information.
 * 
*/

class TelepLinAdaptApp : public Application
{
public:
  TelepLinAdaptApp (Ptr<QuantumPhyEntity> qphyent_, Ptr<QuantumChannel> conn_,
                    const std::pair<std::string, std::string> &epr_);
  virtual ~TelepLinAdaptApp ();

  TelepLinAdaptApp ();
  static TypeId GetTypeId ();

  /**
   * \brief Schedule the epr sharing, local operations, controlled operations, and classical communication.
   * 
   * \note Alice will generate the input qubit if and only if m_input is valid (not null).
  */
  void Teleport ();

  void SetRemote (Address ip, uint16_t port);
  void SetFill (std::string fill);
  void SendPacket (Ptr<Packet> packet, Ipv6Address destination, uint16_t port);
  void Send ();

  void HandleRead (Ptr<Socket> socket);

  void SetQubits (const std::pair<std::string, std::string> &qubits_);
  void SetQubit (const std::string &qubit_);
  /**
   * \brief Set the pointer to (the state vector of) the input qubit.
   * \param input_ The pointer to the input qubit.
  */
  void SetInput (Ptr<Qubit> input_);
  std::vector<std::complex<double>> GetOutput () const;

private:
  void SetupReceiveSocket (Ptr<Socket> socket, uint16_t port);
  virtual void StartApplication ();

  Ptr<Socket> m_send_socket; /**< A socket to listen on a specific port */
  Ptr<Socket> m_recv_socket; /**< A socket to receive on a specific port. */
  uint16_t m_port; /**< The port to receive on. */

  Address m_peerAddress; //!< Remote peer address
  uint16_t m_peerPort; //!< Remote peer port

  uint32_t m_size; //!< Size of the sent packet
  uint32_t m_dataSize; //!< packet payload size (must be equal to m_size)
  uint8_t *m_data; //!< packet payload data

  Ptr<QuantumPhyEntity> m_qphyent; //!< The quantum physical entity
  Ptr<QuantumChannel> m_conn; //!< The quantum connection
  std::pair<std::string, std::string> m_epr; //!< The EPR pair to be generated by Alice
  std::pair<std::string, std::string> m_qubits_pred; //!< The qubits of Alice's predecessor
  std::pair<std::string, std::string> m_qubits; //!< The qubits of Alice
  std::string m_qubit; //!< The qubit of Bob
  Ptr<Qubit> m_input; //!< The state vector of the input qubit
  std::vector<std::complex<double>> m_output; //!< The density matrix of the output qubit
};

} // namespace ns3

#endif /* TELEP_LIN_ADAPT_APP_H */
