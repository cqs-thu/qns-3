#ifndef QUANTUM_NODE_H
#define QUANTUM_NODE_H

#include "ns3/node.h" // class Node

#include "ns3/quantum-memory.h" // class QuantumMemory

namespace ns3 {

class QuantumPhyEntity;
class QuantumErrorModel;

class QuantumNode : public Node
{

private:
  
  /** Quantum physical entity the node is attached to. */
  Ptr<QuantumPhyEntity> m_qphyent;

  /** Owner name of the node. */
  const std::string m_owner;

  /** Address of the node. */
  Address m_address;

  /** Next port to be allocated. */
  uint16_t m_next_port;

  /** Rank of the node in some certain subnet. */
  unsigned m_rank;

  /** Quantum memory of the node. */
  QuantumMemory m_qmemory;

public:
  QuantumNode (Ptr<QuantumPhyEntity> phyent_, std::string owner_);
  ~QuantumNode ();

  QuantumNode ();
  void DoDispose (void) override;
  static TypeId GetTypeId (void);

  void SetAddress (Address addr);
  Address GetAddress () const;

  void SetRank (unsigned r);
  unsigned GetRank () const;

  /**
   * \brief Allocate a port for the node.
   * \return The allocated port.
  */
  uint16_t AllocPort ();

  /**
   * \brief Get the next port to be allocated.
   * \return The next port to be allocated.
  */
  uint16_t GetNextPort () const;

  Ptr<QuantumPhyEntity> GetQuantumPhyEntity () const;

  /**
   * \brief Add a qubit to the node's quantum memory.
   * \param name Name of the qubit to be added.
  */
  void AddQubit (const std::string &name);

  /**
   * \brief Remove a qubit from the node's quantum memory.
   * \param name Name of the qubit to be removed.
   * \return True if the qubit is successfully removed.
  */
  bool RemoveQubit (const std::string &name);

  /**
   * \brief Get the qubit at a specific position.
   * \param local The position in the quantum memory to query.
   * \return Name of the qubit at the position.
  */
  std::string GetQubit (unsigned local) const;

  /**
   * \brief Check if a qubit is in the node's quantum memory.
   * \param name Name of the qubit to be checked.
   * \return True if the qubit is in the quantum memory.
  */
  bool OwnQubit (const std::string &name) const;


  /**
   * \brief Set the time relevant dephasing error model for a qubit.
   * \param pmodel Pointer to the time relevant dephasing error model.
   * \param qubit Name of the qubit to be set the error model.
  */
  void SetErrorModel (Ptr<QuantumErrorModel> pmodel, const std::string &qubit);


  /**
   * \brief Set the time irrelevant dephasing error model for a gate.
   * \param gate Name of the gate to be set the error model.
   * \param rate Dephasing rate of the gate.
  */
  void SetDephaseModel (const std::string &gate, double rate 
  );

  /**
   * \brief Set the time relevant dephasing error model for qubits generated by this node.
   * \param rate Dephasing rate of the qubits.
  */
  void SetTimeModel (double rate);

  const std::string &GetOwner () const;

  bool operator<(const QuantumNode &another) const;

  void PrintIt () const;
};

std::ostream &operator<< (std::ostream &out, const Ptr<QuantumNode> &pnode);

} // namespace ns3

#endif /* QUANTUM_NODE_H */